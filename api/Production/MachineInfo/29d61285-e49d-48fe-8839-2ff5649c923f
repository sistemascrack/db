{"ID":"29d61285-e49d-48fe-8839-2ff5649c923f","Type":"MachineInfoDTO","Manufacturer":"Usikraft","Model":"Evoque 2030 ATC Router","PluginId":"2590","PluginVersion":"1.0","MachineTemplate":"ISO","IsNesting":true,"HasDrills":true,"HasMills":true,"HasConicalMills":true,"HasImageLabels":true,"HasFullLabels":true,"GeneratorId":"ead50207-c178-4198-9853-fb55fa40e353","DefaultSettingsId":"d82f46f3-60bb-4b97-90e6-153f95ad1f98","Assets":[{"ID":"4d75a035-0597-4633-85a8-dc3c0e2c0579","Type":"AssetDTO","Name":"ConicalMillProperties","Content":"","AssetType":"Json"},{"ID":"2820bd2b-9d3b-45ab-bbe3-a1adab36e3f0","Type":"AssetDTO","Name":"DrillProperties","Content":"","AssetType":"Json"},{"ID":"bdf76816-3cee-44d4-8499-78f3c5582df3","Type":"AssetDTO","Name":"MachineProperties","Content":"","AssetType":"Json"},{"ID":"4b214409-7e39-4615-b61e-a6de18f3d698","Type":"AssetDTO","Name":"ManufacturerLogo","Content":"/9j/4AAQSkZJRgABAQAAAQABAAD/4gHYSUNDX1BST0ZJTEUAAQEAAAHIAAAAAAQwAABtbnRyUkdCIFhZWiAAAAAAAAAAAAAAAABhY3NwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAA9tYAAQAAAADTLQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAlkZXNjAAAA8AAAACRyWFlaAAABFAAAABRnWFlaAAABKAAAABRiWFlaAAABPAAAABR3dHB0AAABUAAAABRyVFJDAAABZAAAAChnVFJDAAABZAAAAChiVFJDAAABZAAAAChjcHJ0AAABjAAAADxtbHVjAAAAAAAAAAEAAAAMZW5VUwAAAAgAAAAcAHMAUgBHAEJYWVogAAAAAAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAAt4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9YWVogAAAAAAAA9tYAAQAAAADTLXBhcmEAAAAAAAQAAAACZmYAAPKnAAANWQAAE9AAAApbAAAAAAAAAABtbHVjAAAAAAAAAAEAAAAMZW5VUwAAACAAAAAcAEcAbwBvAGcAbABlACAASQBuAGMALgAgADIAMAAxADb/2wBDAAMCAgICAgMCAgIDAwMDBAYEBAQEBAgGBgUGCQgKCgkICQkKDA8MCgsOCwkJDRENDg8QEBEQCgwSExIQEw8QEBD/2wBDAQMDAwQDBAgEBAgQCwkLEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBD/wAARCAAQABADASIAAhEBAxEB/8QAFgABAQEAAAAAAAAAAAAAAAAABwYI/8QAHxAAAgMAAgMBAQAAAAAAAAAAAQIDBAUGBwgREhMj/8QAFQEBAQAAAAAAAAAAAAAAAAAABQf/xAAfEQACAQMFAQAAAAAAAAAAAAABAgMFESEABBIiQUL/2gAMAwEAAhEDEQA/ALzyS8ieSX9Vc7IgNqe/Gt3NqWo3koRUnZhAohBCT2pUCTFpg6qJRGgVgS6l0hzrefh+52XTp52JU4xuPQ18ChamavJngr9zNWlLCpYjR/0BjYCT4dHUH0VKfJDx+5NjbCamLZFK1QiWln27lk16M1JGY13Wwf5Q2Y4ykLLM8YIiEifRY/nqe7pYXYXH4utOs6yWse+4G1q1YiM+vUaT9LKJN6+J55vbp6jLfJkZ3I9AMfGHMjFjnVcqs1OjpO2i2cYKMTzbxVFr38yML9crkd9f/9k=","AssetType":"Image"},{"ID":"82cb468f-37f7-4869-bd08-9a73e13b8565","Type":"AssetDTO","Name":"MillProperties","Content":"","AssetType":"Json"},{"ID":"19f72b26-d578-485e-af05-af7d56e63ba6","Type":"AssetDTO","Name":"SetupProperties","Content":"","AssetType":"Json"}]}