

/**
    ZAPMAX
*/

// ============================ MyCustomScript ========================================

//essa é a função que capta a mensagem que foi pegada do usuário
function startAutoReplay() {
	debugger
	var myNumber = getMyNumber();
	var itsOk = false;
	var lastm = Store.Chat.models[Store.Chat.models.length - 1];
	
	Store.Chat.models.forEach(function (m) {

		m.countMsgs = m.msgs.length;

		if (m.id._serialized == lastm.id._serialized) {
			itsOk = true;
		}
	});

	setTimeout(function () {
		setInterval(function () {

			var readMSG = CefInjectedJavascript.getReadMSG();

			//aqui, é lido para cada chat ativo, as mensagens carregadas do chat
			Store.Chat.models.forEach(function (m) {
				if (itsOk && (!m.countMsgs || m.countMsgs < m.msgs.length)) {
					m.countMsgs = m.msgs.length;
					
					//o var last message recebe a última mensagem do chat
					var lastmessage = m.msgs.models[m.msgs.length - 1];
					if (lastmessage && !lastmessage.id.fromMe && m.id.user != myNumber && m.id.server != 'g.us') {
						var contact = m.id.user;
						var message = lastmessage.body;
						var name = "";
						console.log(lastmessage);

						try {
							name = Store.Chat.models[0].__x_contact.notifyName;
						} catch (e) {

						}

						CefInjectedJavascript.jaMessage(contact, message, name);
						// if (readMSG === true) {
						// 	var id = contact + "@c.us";

						// 	var contactIsActive = CefInjectedJavascript.leadIsActive(contact);

						// 	if (contactIsActive === true) {
						// 		window.WAPI.sendSeen(id, 0);
						// 	}
						// }
					} else {
					}
				} else {
				}
			});

		}, 500);
	}, 1000);
}

function WMBSP_DeleteAllChates() {

	var chat = Store.Chat.models;

	for (var c = 0; c < chat.length; c++) {



		if (c < chat.length) {

			var id = chat[c].__x_id._serialized;

			window.WAPI.deleteConversation(id);

			console.log("Deleting chat: " + id);

		}



	}
	return true;

}

function checar() {

	if (Store.Conn.__x_connected === true) {
		return 'conectado'
	}
	else {
		return "carregando";
	}

}

function WMBSP_GetPage(connected) {

	if (connected === true) {

		if (typeof Store !== 'undefined') {
			if (typeof Store.Conn !== 'undefined') {
				if (Store.Conn.__x_connected === true) {
					startAutoReplay();
					return 'dashboard'
				}
				else {
					return "login";
				}
			}
			else {
				return "unknown";
			}
		}
		else {
			return "unknown";
		}

	} else {

		var carregou = checkWhatsAppConnection();

		if (carregou === true) {

			if (typeof Store !== 'undefined') {
				if (typeof Store.Conn !== 'undefined') {
					if (Store.Conn.__x_connected === true) {
						startAutoReplay();
						console.log("Iniciou autoresponder");
					}
				}
			}
			return "dashboard";
		} else {
			return "login";
		}

	}


}

function checkWhatsAppConnection() {

	var userIsConnected = false;

	var text = "";

	try {


		if (document.getElementsByClassName("_1lPgH").length > 0) {
			userIsConnected = true;
		}else{
			userIsConnected = false;
		}

	} catch (e) {
		console.log("Error e:" + e);
		userIsConnected = false;
	}

	return userIsConnected;

}

function updateLeadsOptIn() {

	var chat = window.Store.Chat.models;

	try {
		for (var i = 0; i < chat.length; i++) {

			if (chat[i].__x_id.user !== undefined) {

				if (chat[i].__x_id.user) {
					if (chat[i].__x_contact.__x_isWAContact !== undefined) {
						if (chat[i].__x_contact.__x_isWAContact === true) {

							var contatoLimpo = chat[i].__x_id.user.split("-");
							numero = contatoLimpo[0];
							numero = numero;

							try {
								CefInjectedJavascript.updateOptInForLead(numero);
							} catch (e) {

							}

						}
					}
				}

			}

		}

	} catch (e) {

	}


	return checked;

}

function checkLeadName(numberLead) {

	var contact = window.Store.Contact.models;
	var leadName = "";

	try {
		for (var i = 0; i < contact.length; i++) {

			if (contact[i].__x_id.user !== undefined) {
				if (contact[i].__x_id.user === numberLead && contact[i].__x_isMyContact !== undefined) {
					if (contact[i].__x_isWAContact !== undefined) {
						if (contact[i].__x_isWAContact === true) {
							if (contact[i].__x_isMyContact === true) {
								if (contact[i].__x_formattedName !== undefined && contact[i].__x_formattedName !== null && contact[i].__x_formattedName !== "") {
									leadName = contact[i].__x_formattedName;
									break;
								}
							}
						}
					}

				}
			}

		}
	} catch (e) {

	}

	return leadName;

}

function WMBSP_CheckWhatsappAccount(id) {

	Store.WapQuery.queryExist(id).then(function (e) {
		if (e.status === 200) {
			CefInjectedJavascript.resultado(true);
			return true;
		} else {
			CefInjectedJavascript.resultado(false);
			return false;
		}
	});
}

function getMyNumber() {

	try {
		return Store.Conn.__x_wid.user;
	} catch (e) {
		return "Carregando";
	}

}

function getMyName() {

	try {
		if (Store.Conn !== null) {
			return Store.Conn.__x_pushname;
		}
	} catch (e) {
		return "";
	}

}

function getMyLastMessageFromChatByID(number) {

	var chat = getChatModelByNumber(number);
	var wellcomeMessage = CefInjectedJavascript.getWellcomMessage();
	var messages = chat.msgs._models;
	var myLastMessage = getMyLastMessage(number);
	var validateSaveName = false;

	try {

		for (var m = 0; m < messages.length; m++) {

			if (messages.length > 1 && m > 0) {
				if (messages[m - 1].__x_isSentByMe === true && messages[m - 1].__x_text === myLastMessage && myLastMessage !== "NotFound") {
					if (myLastMessage === wellcomeMessage) {
						validateSaveName = true;
					}
				}
			}

		}

	} catch (e) {

	}

	return validateSaveName;

}

function getChatModelByNumber(number) {

	var chats = window.Store.Chat._models;
	var chatID;

	for (var c = 0; c < chats.length; c++) {

		if (chats[c].__x_id !== null) {
			if (chats[c].__x_id.user === number) {
				chatID = chats[c];
			}
		}

	}

	return chatID;

}

function getMyLastMessage(number) {

	var myMessage = "NotFound";
	var chat = getChatModelByNumber(number);
	var msgs = chat.msgs._models;

	try {
		for (var i = 0; i < msgs.length; i++) {

			if (msgs[i].__x_isSentByMe !== null && msgs[i].__x_isSentByMe !== undefined) {
				if (msgs[i].__x_isSentByMe === true) {
					myMessage = msgs[i].__x_text;
				}
			}

		}
	} catch (e) {

	}

	return myMessage;

}

function markAllAsRead() {

	var chats = Store.Chat._models;

	var qtd = getCountOfChats();

	for (var i = 0; i < qtd; i++) {

		var numero = "";

		if (chats[i].__x_contact.__x_isUser !== null && chats[i].__x_contact.__x_isUser === true && chats[i].__x_contact.__x_isMe === false) {
			if (chats[i].__x_id.user !== "") {
				numero = chats[i].__x_id.user;
			}

			if (chats[i].__x_id.user.includes("-")) {
				var contatoLimpo = chats[i].__x_id.user.split("-");
				numero = contatoLimpo[0];
			}

		}

		numero = numero + "@c.us";

		window.WAPI.sendSeen(numero, i);

	}

}

function markOnlyActivesAsRead(numeroLead) {

	var chats = Store.Chat._models;

	var qtd = getCountOfChats();

	for (var i = 0; i < qtd; i++) {

		var numero = "";

		if (chats[i].__x_contact.__x_isUser !== null && chats[i].__x_contact.__x_isUser === true && chats[i].__x_contact.__x_isMe === false) {
			if (chats[i].__x_id.user !== "") {
				numero = chats[i].__x_id.user;
			}

			if (chats[i].__x_id.user.includes("-")) {
				var contatoLimpo = chats[i].__x_id.user.split("-");
				numero = contatoLimpo[0];
			}

		}

		if (numero === numeroLead) {
			numero = numero + "@c.us";
			window.WAPI.sendSeen(numero, i);
		}

	}

}

function getAllContacts(unknownNotAllowed) {

	var contatos = Store.Contact._models;

	var qtd = getCountOfContacts();

	for (var i = 0; i < qtd; i++) {

		var numero = "";
		var nome = "";
		var isMyContact = true;


		if (contatos[i].__x_isUser !== null && contatos[i].__x_isUser === true && contatos[i].__x_isMe === false) {
			if (contatos[i].__x_id.user !== "") {
				numero = contatos[i].__x_id.user;
				nome = contatos[i].__x_formattedName;
			}

			if (contatos[i].__x_id.user.includes("-")) {
				var contatoLimpo = contatos[i].__x_id.user.split("-");
				numero = contatoLimpo[0];
				nome = contatos[i].__x_formattedName;
			}

			if (contatos[i].__x_isMyContact !== null) {

				if (contatos[i].__x_isMyContact === true) {
					isMyContact = true;
				} else {
					isMyContact = false;
				}

			}
		}


		if (unknownNotAllowed === false) {
			CefInjectedJavascript.synchronizeContact(numero, nome);
		} else if (unknownNotAllowed === true && isMyContact === true) {
			CefInjectedJavascript.synchronizeContact(numero, nome);
		}


	}
}

function getCountOfContacts() {

	return Store.Contact._models.length;

}

function getAllContactsFromChats(unknownNotAllowed) {

	var chats = Store.Chat._models;

	var qtd = getCountOfChats();

	for (var i = 0; i < qtd; i++) {

		var numero = "";
		var nome = "";
		var isMyContact = true;

		if (chats[i].__x_contact.__x_isUser !== null && chats[i].__x_contact.__x_isUser === true && chats[i].__x_contact.__x_isMe === false) {
			if (chats[i].__x_id.user !== "") {
				numero = chats[i].__x_id.user;
				nome = chats[i].__x_contact.__x_formattedName;
			}

			if (chats[i].__x_id.user.includes("-")) {
				var contatoLimpo = chats[i].__x_id.user.split("-");
				numero = contatoLimpo[0];
				nome = chats[i].__x_contact.__x_formattedName;
			}

			if (chats[i].__x_contact.__x_isMyContact !== null) {

				if (chats[i].__x_contact.__x_isMyContact === true) {
					isMyContact = true;
				} else if (chats[i].__x_contact.__x_isMyContact === false) {
					isMyContact = false;
				}

			}
		}

		if (unknownNotAllowed === false) {
			CefInjectedJavascript.synchronizeContact(numero, nome);
		} else if (unknownNotAllowed === true && isMyContact === true) {
			CefInjectedJavascript.synchronizeContact(numero, nome);
		}

	}

}

function getCountOfChats() {

	return Store.Chat._models.length;


}

function getAllContactsFromGroup(groupName, unknownNotAllowed) {

	var numero = "";
	var nome = "";
	var isMyContact = true;

	var grp = window.WAPI.getAllGroups();

	for (var gp = 0; gp < grp.length; gp++) {

		if (grp[gp].__x_formattedTitle !== null) {

			if (grp[gp].__x_formattedTitle === groupName) {

				for (var contact = 0; contact < grp[gp].__x_groupMetadata.participants._models.length; contact++) {

					if (grp[gp].__x_groupMetadata.participants._models[contact].__x_contact.__x_isUser !== null && grp[gp].__x_groupMetadata.participants._models[contact].__x_contact.__x_isUser === true && grp[gp].__x_groupMetadata.participants._models[contact].__x_contact.__x_isMe === false) {
						numero = grp[gp].__x_groupMetadata.participants._models[contact].__x_contact.__x_id.user;
						nome = grp[gp].__x_groupMetadata.participants._models[contact].__x_contact.__x_formattedName;

						if (numero.includes("-")) {
							var contatoLimpo = numero.split("-");
							numero = contatoLimpo[0];
						}


						if (grp[gp].__x_groupMetadata.participants._models[contact].__x_contact.__x_isMyContact !== null) {

							if (grp[gp].__x_groupMetadata.participants._models[contact].__x_contact.__x_isMyContact === true) {
								isMyContact = true;
							} else {
								isMyContact = false;
							}

						}
					}

					if (unknownNotAllowed === false) {
						CefInjectedJavascript.addContactFromGroup(numero, nome);
					} else if (unknownNotAllowed === true && isMyContact === true) {
						CefInjectedJavascript.addContactFromGroup(numero, nome);
					}



				}

			}
		}

	}

}

function getAllNamesGroup() {

	const groups = window.WAPI.getAllGroups();

	for (var gp = 0; gp < groups.length; gp++) {

		if (groups[gp] !== null) {

			if (groups[gp].__x_formattedTitle !== "") {
				CefInjectedJavascript.addGroup(groups[gp].__x_formattedTitle);
			}

		}

	}

}

function getCountOfGroups() {

	const groups = window.WAPI.getAllGroups();

	return groups.length;

}

function getCountContactsOfGroups(groupName) {

	const groups = window.WAPI.getAllGroups();

	var qtdContactsGP = 0;

	for (var gp = 0; gp < groups.length; gp++) {

		if (groups[gp].__x_formattedTitle !== null) {

			if (groups[gp].__x_formattedTitle === groupName) {

				for (var contact = 0; contact < groups[gp].__x_groupMetadata.participants._models.length; contact++) {

					qtdContactsGP++;

				}
			}
		}

	}

	return qtdContactsGP;

}
function sendMessageToContact(chatid, message, isReturn) {
	/*try {
		
		console.log("mensagem: "+msgText);
		
		window.getContact = (id) => {
			return Store.WapQuery.queryExist(id);
		}

		window.getContact(id).then(contact => {
			if (contact.status === 404) {
				if (isReturn === true) {
					// CefInjectedJavascript.resultado(false);
				}
			} else {
				Store.Chat.find(contact.jid).then(chat => {
					chat.sendMessage(msgText);
					if (isReturn === true) {

					}
					// CefInjectedJavascript.resultado(true);
					return true;
				}).catch(reject => {
					if (WAPI.sendMessage(id, msgText)) {
						if (isReturn === true) {

						}
						// CefInjectedJavascript.resultado(true);
						return true;
					} else {
						if (isReturn === true) {

						}
						// CefInjectedJavascript.resultado(false);
						return false;
					}
				});
			}
		});
	} catch (e) {
		if (isReturn === true) {
			CefInjectedJavascript.resultado(false);
		}
	return false;*/
		try {
				var idUser = new window.Store.UserConstructor(chatid, {
					intentionallyUsePrivateConstructor: true
				});
				return Store.Chat.find(idUser).then((chatid) => {
					var mc = new Store.SendTextMsgToChat(chatid, message);
					return true;
				}); 
				console.log("Executou função de envio");
		} catch (e) {
				console.log("Não executou função de envio");
				CefInjectedJavascript.resultado(false);
				return false;
		}

}
			

function getAllGroupsContacts(unknownNotAllowed) {

	var numero = "";
	var nome = "";
	var isMyContact = true;

	var grp = window.WAPI.getAllGroups();

	for (var gp = 0; gp < grp.length; gp++) {

		if (grp[gp].__x_formattedTitle !== null) {

			for (var contact = 0; contact < grp[gp].__x_groupMetadata.participants._models.length; contact++) {

				if (grp[gp].__x_groupMetadata.participants._models[contact].__x_contact.__x_isUser !== null && grp[gp].__x_groupMetadata.participants._models[contact].__x_contact.__x_isUser === true && grp[gp].__x_groupMetadata.participants._models[contact].__x_contact.__x_isMe === false) {

					numero = grp[gp].__x_groupMetadata.participants._models[contact].__x_contact.__x_id.user;
					nome = grp[gp].__x_groupMetadata.participants._models[contact].__x_contact.__x_formattedName;

					if (numero.includes("-")) {
						var contatoLimpo = numero.split("-");
						numero = contatoLimpo[0];
					}


					if (grp[gp].__x_groupMetadata.participants._models[contact].__x_contact.__x_isMyContact !== null) {

						if (grp[gp].__x_groupMetadata.participants._models[contact].__x_contact.__x_isMyContact === true) {
							isMyContact = true;
						} else {
							isMyContact = false;
						}

					}
				}

				if (unknownNotAllowed === false) {
					CefInjectedJavascript.addContactFromGroup(numero, nome);
				} else if (unknownNotAllowed === true && isMyContact === true) {
					CefInjectedJavascript.addContactFromGroup(numero, nome);
				}

			}


		}

	}

}

function getCountContactsAllGroups() {

	var grp = window.WAPI.getAllGroups();

	var qtdContactsGroups = 0;

	for (var gp = 0; gp < grp.length; gp++) {

		if (grp[gp].__x_formattedTitle !== null) {

			qtdContactsGroups = qtdContactsGroups + grp[gp].__x_groupMetadata.participants._models.length;


		}

	}

	return qtdContactsGroups;

}

function WMBSP_GETPROFILEPICTUREFROMID(id) {

	try {
		var objContact = [];

			var objContact = window.Store.ProfilePicThumb.find(id);

			return objContact._value.__x_eurl;
			
	} catch (e) {
		return "";
	}

}

// TALVEZ ARRUMAR FUTURAMENTE
function WMBSP_GETPROFILEPICTUREFROMCONTACT(id) {

	try {
		var urlImage = "";

		urlImage = document.getElementsByClassName("_8hzr9 M0JmA i0jNr")[0].src;

		return urlImage;
	} catch (e) {
		return "";
	}

}

function _requireById(id) {
	try {
		if (typeof webpackJsonp === 'function') {
			return webpackJsonp([], null, [id]);
		} else {
			return webpackJsonp.push([], null, [id]);
		}
	} catch (e) {
		console.log("Erro " + e);
		return false;
	}
}

var createFromData_id = "beeieigghj";
var prepareRawMedia_id = "ddgbhifaji";
var chat_id = "dbbhhgjjbg";

function SendMediaFileChatBot(id, isReturn = true) {

	debugger;

	var caption = CefInjectedJavascript.getChatBotMessage();
	var typefile = CefInjectedJavascript.getTypeFile();
	var filename = CefInjectedJavascript.getFileName();
	var idUser = id;
	var imgBase64 = CefInjectedJavascript.getBase64();
	//var caption = CefInjectedJavascript.getMessage();

	try {

		return Store.Chat.find(idUser).then((chat) => {

			var mediaBlob = window.WAPI.base64ImageToFile(imgBase64, filename);
			var mc = new Store.MediaCollection(chat);
			mc.processAttachments([{ file: mediaBlob }, 1], chat, 1).then(() => {
				let media = mc.models[0];
				media.sendToChat(chat, { caption: caption });
				if (done !== undefined) done(true);

			});


			//window.WAPI.procFiles(chat,mediaBlob).then(mc => {
			//    var media = mc.models[0];
			//    media.sendToChat(chat, { caption: caption });
			//});

		});

	} catch (e) {
		if (isReturn) {
			CefInjectedJavascript.resultSend(id, false);
		}
	}

}

function WMBSP_SendMediaFile2(id, isReturn = true) {

	debugger;
	var createFromDataClass = _requireById(createFromData_id)["default"];
	var prepareRawMediaClass = _requireById(prepareRawMedia_id).prepRawMedia;
	var msgText = CefInjectedJavascript.getMessage();
	var base64 = CefInjectedJavascript.getBase64();
	var typefile = CefInjectedJavascript.getTypeFile();
	var filename = CefInjectedJavascript.getFileName();

	Store.WapQuery.queryExist(id).then(function (e) {
		if (e.status === 200) {
			Store.Chat.find(e.jid).then((chat) => {
				try {



					var byteCharacters = atob(base64);
					var byteNumbers = new Array(byteCharacters.length);
					for (var i = 0; i < byteCharacters.length; i++) {
						byteNumbers[i] = byteCharacters.charCodeAt(i);
					}
					var byteArray = new Uint8Array(byteNumbers);


					var file = new File([byteArray], filename, {
						type: typefile,
					});
					// myBlob is now the blob that the object URL pointed to.
					var temp = createFromDataClass.createFromData(file, file.type);
					var rawMedia = prepareRawMediaClass(temp, {});
					var target = null;

					var textPortion = {
						caption: msgText,
						mentionedJidList: [],
						quotedMsg: target
					};

					rawMedia.sendToChat(chat, textPortion);
					if (isReturn)
						CefInjectedJavascript.resultSend(id, true);
				} catch (e) {


					console.log(e);
					if (isReturn)
						CefInjectedJavascript.resultSend(id, false);
				}

			});
		}
		else {
			if (isReturn)
				CefInjectedJavascript.resultSend(id, false);
		}
	});

	return true;
}

function WMBSP_SendMediaFile(id, isReturn = true) {

	var idUser = id;
	var imgBase64 = CefInjectedJavascript.getBase64();
	var filename = CefInjectedJavascript.getFileName();
	var caption = CefInjectedJavascript.getMessage();

	try {

		return Store.Chat.find(idUser).then((chat) => {

			var mediaBlob = window.WAPI.base64ImageToFile(imgBase64, filename);
			var mc = new Store.MediaCollection(chat);
			mc.processAttachments([{ file: mediaBlob }, 1], chat, 1).then(() => {
				let media = mc.models[0];
				media.sendToChat(chat, { caption: caption });
				if (done !== undefined) done(true);

			});
			//window.WAPI.procFiles(chat,mediaBlob).then(mc => {
			//    var media = mc.models[0];
			//    media.sendToChat(chat, { caption: caption });
			//});

		});

		if (isReturn)
			CefInjectedJavascript.resultSend(id, true);

	} catch (e) {
		if (isReturn) {
			CefInjectedJavascript.resultSend(id, false);
		}
	}

}

function reloadDocument() {
	document.location.reload();
}

<<<<!!!!<>!!!!>>>>>
// ============================ RSSAPI ========================================

function getContactNumberRSS(){
	
	var number = "";
	
	try{
	number = document.getElementsByTagName("title")[1].textContent;
	return number;
	}catch(e){
	return "";
	}
	
}

function getContactNameRSS(){
	
	var name = "";
	
	try{
	name = document.getElementsByTagName("title")[0].textContent;
	return name;
	}catch(e){
	return "";
	}
	
	
	
}

function getMessageRSS(){
	
	var message = "";

	try{
	message = document.getElementsByTagName("description")[1].textContent;
	return message;
	}catch(e){
	return "";
	}
	
}

function getDateRSS(indContact){
	
	var date = "";
	
	try{
		date = document.getElementsByTagName("lastBuildDate")[0].textContent.toString();
	}catch(e){
		return "";
	}
	
	return date;
	
}

function getNamePHP(indContact){

var name = "";

try{
name = document.getElementsByClassName("contato")[indContact].children[0].textContent;
}catch(e){
name = "";
}

return name;

}

function getNumberPHP(indContact){

var number = "";

try{
number = document.getElementsByClassName("contato")[indContact].children[1].textContent;
}catch(e){
number = "";
}

return number;

}

function getMessagePHP(indContact){

var message = "";

try{
message = document.getElementsByClassName("contato")[indContact].children[2].textContent;
}catch(e){
message = "";
}

return message;

}

function getDatePHP(indContact){
	
	var date = "";
	
	try{
		date = document.getElementsByClassName("contato")[indContact].childNodes[0].data.toString();
	}catch(e){
		return "";
	}
	
	return date;
	
}

function getTotContactsPHP(){
	
	var qtd = 0;
	
	try{
		qtd = document.getElementsByClassName("contato").length;
	}catch(e){
		qtd=0;
	}
	
	return qtd;
	
}

<<<<!!!!<>!!!!>>>>>
// ============================ ZapMaxJS-WAPI ========================================


/**
 * This script contains WAPI functions that need to be run in the context of the webpage
 */

/**
 * Auto discovery the webpack object references of instances that contains all functions used by the WAPI
 * functions and creates the Store object.
 */
if (!window.Store) {
    (function () {
        function getStore(modules) {
        let foundCount = 0;
		let neededObjects = [
                { id: "Store", conditions: (module) => (module.default && module.default.Chat && module.default.Msg) ? module.default : null },
                { id: "MediaCollection", conditions: (module) => (module.default && module.default.prototype && module.default.prototype.processAttachments) ? module.default : null },
                { id: "MediaProcess", conditions: (module) => (module.BLOB) ? module : null },
                { id: "Wap", conditions: (module) => (module.createGroup) ? module : null },
                { id: "ServiceWorker", conditions: (module) => (module.default && module.default.killServiceWorker) ? module : null },
                { id: "State", conditions: (module) => (module.STATE && module.STREAM) ? module : null },
                { id: "WapDelete", conditions: (module) => (module.sendConversationDelete && module.sendConversationDelete.length == 2) ? module : null },
                { id: "Conn", conditions: (module) => (module.default && module.default.ref && module.default.refTTL) ? module.default : null },
                { id: "WapQuery", conditions: (module) => (module.default && module.default.queryExist) ? module.default : null },
                { id: "CryptoLib", conditions: (module) => (module.decryptE2EMedia) ? module : null },
                { id: "OpenChat", conditions: (module) => (module.default && module.default.prototype && module.default.prototype.openChat) ? module.default : null },
                { id: "UserConstructor", conditions: (module) => (module.default && module.default.prototype && module.default.prototype.isServer && module.default.prototype.isUser) ? module.default : null },
                { id: "SendTextMsgToChat", conditions: (module) => (module.sendTextMsgToChat) ? module.sendTextMsgToChat : null },
                { id: "SendSeen", conditions: (module) => (module.sendSeen) ? module.sendSeen : null },
                { id: "sendDelete", conditions: (module) => (module.sendDelete) ? module.sendDelete : null }
            ];
        for (let idx in modules) {
            if ((typeof modules[idx] === "object") && (modules[idx] !== null)) {
                neededObjects.forEach((needObj) => {
                    if (!needObj.conditions || needObj.foundedModule)
                        return;
                    let neededModule = needObj.conditions(modules[idx]);
                    if (neededModule !== null) {
                        foundCount++;
                        needObj.foundedModule = neededModule;
                    }
                });

                if (foundCount == neededObjects.length) {
                    break;
                }
            }
        }

        let neededStore = neededObjects.find((needObj) => needObj.id === "Store");
        window.Store = neededStore.foundedModule ? neededStore.foundedModule : {};
        neededObjects.splice(neededObjects.indexOf(neededStore), 1);
        neededObjects.forEach((needObj) => {
            if (needObj.foundedModule) {
                window.Store[needObj.id] = needObj.foundedModule;
            }
        });
		
		window.Store.Chat.modelClass.prototype.sendMessage = function (e) {
			window.Store.SendTextMsgToChat(this, ...arguments);
		}		
		
        return window.Store;
    }

        if (typeof webpackJsonp === 'function') {
            webpackJsonp([], {'parasite': (x, y, z) => getStore(z)}, ['parasite']);
        } else {
            let tag = new Date().getTime();
			webpackChunkwhatsapp_web_client.push([
				["parasite" + tag],
				{

				},
				function (o, e, t) {
					let modules = [];
					for (let idx in o.m) {
						let module = o(idx);
						modules.push(module);
					}
					getStore(modules);
				}
			]);
        }

    })();
}

window.WAPI = {
    lastRead: {}
};

window.WAPI._serializeRawObj = (obj) => {
    if (obj) {
        return obj.toJSON();
    }
    return {}
};

/**
 * Serializes a chat object
 *
 * @param rawChat Chat object
 * @returns {{}}
 */

window.WAPI._serializeChatObj = (obj) => {
    if (obj == undefined) {
        return null;
    }

    return Object.assign(window.WAPI._serializeRawObj(obj), {
        kind         : obj.kind,
        isGroup      : obj.isGroup,
        contact      : obj['contact'] ? window.WAPI._serializeContactObj(obj['contact'])        : null,
        groupMetadata: obj["groupMetadata"] ? window.WAPI._serializeRawObj(obj["groupMetadata"]): null,
        presence     : obj["presence"] ? window.WAPI._serializeRawObj(obj["presence"])          : null,
        msgs         : null
    });
};

window.WAPI._serializeContactObj = (obj) => {
    if (obj == undefined) {
        return null;
    }

    return Object.assign(window.WAPI._serializeRawObj(obj), {
        formattedName      : obj.formattedName,
        isHighLevelVerified: obj.isHighLevelVerified,
        isMe               : obj.isMe,
        isMyContact        : obj.isMyContact,
        isPSA              : obj.isPSA,
        isUser             : obj.isUser,
        isVerified         : obj.isVerified,
        isWAContact        : obj.isWAContact,
        profilePicThumbObj : obj.profilePicThumb ? WAPI._serializeProfilePicThumb(obj.profilePicThumb): {},
        statusMute         : obj.statusMute,
        msgs               : null
    });
};

window.WAPI._serializeMessageObj = (obj) => {
    if (obj == undefined) {
        return null;
    }

    return Object.assign(window.WAPI._serializeRawObj(obj), {
        id            : obj.id._serialized,
        sender        : obj["senderObj"] ? WAPI._serializeContactObj(obj["senderObj"]): null,
        timestamp     : obj["t"],
        content       : obj["body"],
        isGroupMsg    : obj.isGroupMsg,
        isLink        : obj.isLink,
        isMMS         : obj.isMMS,
        isMedia       : obj.isMedia,
        isNotification: obj.isNotification,
        isPSA         : obj.isPSA,
        type          : obj.type,
        chat          : WAPI._serializeChatObj(obj['chat']),
        chatId        : obj.id.remote,
        quotedMsgObj  : WAPI._serializeMessageObj(obj['_quotedMsgObj']),
        mediaData     : window.WAPI._serializeRawObj(obj['mediaData'])
    });
};

window.WAPI._serializeNumberStatusObj = (obj) => {
    if (obj == undefined) {
        return null;
    }

    return Object.assign({}, {
        id               : obj.jid,
        status           : obj.status,
        isBusiness       : (obj.biz === true),
        canReceiveMessage: (obj.status === 200)
    });
};

window.WAPI._serializeProfilePicThumb = (obj) => {
    if (obj == undefined) {
        return null;
    }

    return Object.assign({}, {
        eurl   : obj.eurl,
        id     : obj.id,
        img    : obj.img,
        imgFull: obj.imgFull,
        raw    : obj.raw,
        tag    : obj.tag
    });
}

window.WAPI.createGroup = function (name, contactsId) {
    if (!Array.isArray(contactsId)) {
        contactsId = [contactsId];
    }

    return window.Store.Wap.createGroup(name, contactsId);
};

window.WAPI.leaveGroup = function (groupId) {
    groupId = typeof groupId == "string" ? groupId : groupId._serialized;
    var group = WAPI.getChat(groupId);
    return group.sendExit()
};


window.WAPI.getAllContacts = function (done) {
    const contacts = window.Store.Contact.map((contact) => WAPI._serializeContactObj(contact));

    if (done !== undefined) done(contacts);
    return contacts;
};

/**
 * Fetches all contact objects from store, filters them
 *
 * @param done Optional callback function for async execution
 * @returns {Array|*} List of contacts
 */
window.WAPI.getMyContacts = function (done) {
    const contacts = window.Store.Contact.filter((contact) => contact.isMyContact === true).map((contact) => WAPI._serializeContactObj(contact));
    if (done !== undefined) done(contacts);
    return contacts;
};

/**
 * Fetches contact object from store by ID
 *
 * @param id ID of contact
 * @param done Optional callback function for async execution
 * @returns {T|*} Contact object
 */
window.WAPI.getContact = function (id, done) {
    const found = window.Store.Contact.get(id);

    if (done !== undefined) done(window.WAPI._serializeContactObj(found))
    return window.WAPI._serializeContactObj(found);
};

/**
 * Fetches all chat objects from store
 *
 * @param done Optional callback function for async execution
 * @returns {Array|*} List of chats
 */
window.WAPI.getAllChats = function (done) {
    const chats = window.Store.Chat.map((chat) => WAPI._serializeChatObj(chat));

    if (done !== undefined) done(chats);
    return chats;
};

window.WAPI.haveNewMsg = function (chat) {
    return chat.unreadCount > 0;
};

window.WAPI.getAllChatsWithNewMsg = function (done) {
    const chats = window.Store.Chat.filter(window.WAPI.haveNewMsg).map((chat) => WAPI._serializeChatObj(chat));

    if (done !== undefined) done(chats);
    return chats;
};

/**
 * Fetches all chat IDs from store
 *
 * @param done Optional callback function for async execution
 * @returns {Array|*} List of chat id's
 */
window.WAPI.getAllChatIds = function (done) {
    const chatIds = window.Store.Chat.map((chat) => chat.id._serialized || chat.id);

    if (done !== undefined) done(chatIds);
    return chatIds;
};

/**
 * Fetches all groups objects from store
 *
 * @param done Optional callback function for async execution
 * @returns {Array|*} List of chats
 */
window.WAPI.getAllGroups = function (done) {
    const groups = window.Store.Chat.filter((chat) => chat.isGroup);

    if (done !== undefined) done(groups);
    return groups;
};

/**
 * Fetches chat object from store by ID
 *
 * @param id ID of chat
 * @param done Optional callback function for async execution
 * @returns {T|*} Chat object
 */
window.WAPI.getChat = function (id, done) {
    id = typeof id == "string" ? id : id._serialized;
    const found = window.Store.Chat.get(id);
    // console.log("id: " + id);
    // console.log("chat antes de pegar: "+found);
    // console.log("TENTATIVA RAW: " + window.Store.Chat.get(id));
    found.sendMessage = (found.sendMessage) ? found.sendMessage : function () { return window.Store.sendMessage.apply(this, arguments); };
    if (done !== undefined) done(found);
    // console.log("chat depois de definir: " + found);
    return found;
}

window.WAPI.getChatByName = function (name, done) {
    const found = window.WAPI.getAllChats().find(val => val.name.includes(name))
    if (done !== undefined) done(found);
    return found;
};

window.WAPI.sendImageFromDatabasePicBot = function (picId, chatId, caption) {
    var chatDatabase = window.WAPI.getChatByName('DATABASEPICBOT');
    var msgWithImg   = chatDatabase.msgs.find((msg) => msg.caption == picId);

    if (msgWithImg === undefined) {
        return false;
    }
    var chatSend = WAPI.getChat(chatId);
    if (chatSend === undefined) {
        return false;
    }
    const oldCaption = msgWithImg.caption;

    msgWithImg.id.id     = window.WAPI.getNewId();
    msgWithImg.id.remote = chatId;
    msgWithImg.t         = Math.ceil(new Date().getTime() / 1000);
    msgWithImg.to        = chatId;

    if (caption !== undefined && caption !== '') {
        msgWithImg.caption = caption;
    } else {
        msgWithImg.caption = '';
    }

    msgWithImg.collection.send(msgWithImg).then(function (e) {
        msgWithImg.caption = oldCaption;
    });

    return true;
};

window.WAPI.sendMessageWithThumb = function (thumb, url, title, description, text, chatId, done) {
    var chatSend = WAPI.getChat(chatId);
    if (chatSend === undefined) {
        if (done !== undefined) done(false);
        return false;
    }
    var linkPreview = {
        canonicalUrl: url,
        description : description,
        matchedText : url,
        title       : title,
        thumbnail   : thumb,
        compose: true
    };
    chatSend.sendMessage(text, { linkPreview: linkPreview,
                                mentionedJidList: [],
                                quotedMsg: null,
                                quotedMsgAdminGroupJid: null });
    if (done !== undefined) done(true);
    return true;
};

window.WAPI.getNewId = function () {
    var text     = "";
    var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

    for (var i = 0; i < 20; i++)
        text += possible.charAt(Math.floor(Math.random() * possible.length));
    return text;
};

window.WAPI.getChatById = function (id, done) {
    let found = WAPI.getChat(id);
    if (found) {
        found = WAPI._serializeChatObj(found);
    } else {
        found = false;
    }

    if (done !== undefined) done(found);
    return found;
};


/**
 * I return all unread messages from an asked chat and mark them as read.
 *
 * :param id: chat id
 * :type  id: string
 *
 * :param includeMe: indicates if user messages have to be included
 * :type  includeMe: boolean
 *
 * :param includeNotifications: indicates if notifications have to be included
 * :type  includeNotifications: boolean
 *
 * :param done: callback passed by selenium
 * :type  done: function
 *
 * :returns: list of unread messages from asked chat
 * :rtype: object
 */
window.WAPI.getUnreadMessagesInChat = function (id, includeMe, includeNotifications, done) {
    // get chat and its messages
    let chat     = WAPI.getChat(id);
    let messages = chat.msgs._models;

    // initialize result list
    let output = [];

    // look for unread messages, newest is at the end of array
    for (let i = messages.length - 1; i >= 0; i--) {
        // system message: skip it
        if (i === "remove") {
            continue;
        }

        // get message
        let messageObj = messages[i];

        // found a read message: stop looking for others
        if (typeof (messageObj.isNewMsg) !== "boolean" || messageObj.isNewMsg === false) {
            continue;
        } else {
            messageObj.isNewMsg = false;
            // process it
            let message = WAPI.processMessageObj(messageObj,
                    includeMe,
                    includeNotifications);

            // save processed message on result list
            if (message)
                output.push(message);
        }
    }
    // callback was passed: run it
    if (done !== undefined) done(output);
    // return result list
    return output;
}
;


/**
 * Load more messages in chat object from store by ID
 *
 * @param id ID of chat
 * @param done Optional callback function for async execution
 * @returns None
 */
window.WAPI.loadEarlierMessages = function (id, done) {
    const found = WAPI.getChat(id);
    if (done !== undefined) {
        found.loadEarlierMsgs().then(function () {
            done()
        });
    } else {
        found.loadEarlierMsgs();
    }
};

/**
 * Load more messages in chat object from store by ID
 *
 * @param id ID of chat
 * @param done Optional callback function for async execution
 * @returns None
 */
window.WAPI.loadAllEarlierMessages = function (id, done) {
    const found = WAPI.getChat(id);
    x = function () {
        if (!found.msgs.msgLoadState.noEarlierMsgs) {
            found.loadEarlierMsgs().then(x);
        } else if (done) {
            done();
        }
    };
    x();
};

window.WAPI.asyncLoadAllEarlierMessages = function (id, done) {
    done();
    window.WAPI.loadAllEarlierMessages(id);
};

window.WAPI.areAllMessagesLoaded = function (id, done) {
    const found = WAPI.getChat(id);
    if (!found.msgs.msgLoadState.noEarlierMsgs) {
        if (done) done(false);
        return false
    }
    if (done) done(true);
    return true
};

/**
 * Load more messages in chat object from store by ID till a particular date
 *
 * @param id ID of chat
 * @param lastMessage UTC timestamp of last message to be loaded
 * @param done Optional callback function for async execution
 * @returns None
 */

window.WAPI.loadEarlierMessagesTillDate = function (id, lastMessage, done) {
    const found = WAPI.getChat(id);
    x = function () {
        if (found.msgs.models[0].t > lastMessage && !found.msgs.msgLoadState.noEarlierMsgs) {
            found.loadEarlierMsgs().then(x);
        } else {
            done();
        }
    };
    x();
};


/**
 * Fetches all group metadata objects from store
 *
 * @param done Optional callback function for async execution
 * @returns {Array|*} List of group metadata
 */
window.WAPI.getAllGroupMetadata = function (done) {
    const groupData = window.Store.GroupMetadata.map((groupData) => groupData.all);

    if (done !== undefined) done(groupData);
    return groupData;
};

/**
 * Fetches group metadata object from store by ID
 *
 * @param id ID of group
 * @param done Optional callback function for async execution
 * @returns {T|*} Group metadata object
 */
window.WAPI.getGroupMetadata = async function (id, done) {
    let output = window.Store.GroupMetadata.get(id);

    if (output !== undefined) {
        if (output.stale) {
            await output.update();
        }
    }

    if (done !== undefined) done(output);
    return output;

};


/**
 * Fetches group participants
 *
 * @param id ID of group
 * @returns {Promise.<*>} Yields group metadata
 * @private
 */
window.WAPI._getGroupParticipants = async function (id) {
    const metadata = await WAPI.getGroupMetadata(id);
    return metadata.participants;
};

/**
 * Fetches IDs of group participants
 *
 * @param id ID of group
 * @param done Optional callback function for async execution
 * @returns {Promise.<Array|*>} Yields list of IDs
 */
window.WAPI.getGroupParticipantIDs = async function (id, done) {
    const output = (await WAPI._getGroupParticipants(id))
            .map((participant) => participant.id);

    if (done !== undefined) done(output);
    return output;
};

window.WAPI.getGroupAdmins = async function (id, done) {
    const output = (await WAPI._getGroupParticipants(id))
            .filter((participant) => participant.isAdmin)
            .map((admin) => admin.id);

    if (done !== undefined) done(output);
    return output;
};

/**
 * Gets object representing the logged in user
 *
 * @returns {Array|*|$q.all}
 */
window.WAPI.getMe = function (done) {
    const rawMe = window.Store.Contact.get(window.Store.Conn.me);

    if (done !== undefined) done(rawMe.all);
    return rawMe.all;
};

window.WAPI.isLoggedIn = function (done) {
    // Contact always exists when logged in
    const isLogged = window.Store.Contact && window.Store.Contact.checksum !== undefined;

    if (done !== undefined) done(isLogged);
    return isLogged;
};

window.WAPI.isConnected = function (done) {
    // Phone Disconnected icon appears when phone is disconnected from the tnternet
    const isConnected = document.querySelector('*[data-icon="alert-phone"]') !== null ? false : true;

    if (done !== undefined) done(isConnected);
    return isConnected;
};

window.WAPI.processMessageObj = function (messageObj, includeMe, includeNotifications) {
    if (messageObj.isNotification) {
        if (includeNotifications)
            return WAPI._serializeMessageObj(messageObj);
        else
            return;
        // System message
        // (i.e. "Messages you send to this chat and calls are now secured with end-to-end encryption...")
    } else if (messageObj.id.fromMe === false || includeMe) {
        return WAPI._serializeMessageObj(messageObj);
    }
    return;
};

window.WAPI.getAllMessagesInChat = function (id, includeMe, includeNotifications, done) {
    const chat     = WAPI.getChat(id);
    let   output   = [];
    const messages = chat.msgs._models;

    for (const i in messages) {
        if (i === "remove") {
            continue;
        }
        const messageObj = messages[i];

        let message = WAPI.processMessageObj(messageObj, includeMe, includeNotifications)
        if (message)
            output.push(message);
    }
    if (done !== undefined) done(output);
    return output;
};

window.WAPI.getAllMessageIdsInChat = function (id, includeMe, includeNotifications, done) {
    const chat     = WAPI.getChat(id);
    let   output   = [];
    const messages = chat.msgs._models;

    for (const i in messages) {
        if ((i === "remove")
                || (!includeMe && messages[i].isMe)
                || (!includeNotifications && messages[i].isNotification)) {
            continue;
        }
        output.push(messages[i].id._serialized);
    }
    if (done !== undefined) done(output);
    return output;
};

window.WAPI.getMessageById = function (id, done) {
    let result = false;
    try {
        let msg = window.Store.Msg.get(id);
        if (msg) {
            result = WAPI.processMessageObj(msg, true, true);
        }
    } catch (err) { }

    if (done !== undefined) {
        done(result);
    } else {
        return result;
    }
};

window.WAPI.ReplyMessage = function (idMessage, message, done) {
    var messageObject = window.Store.Msg.get(idMessage);
    if (messageObject === undefined) {
        if (done !== undefined) done(false);
        return false;
    }
    messageObject = messageObject.value();

    const chat = WAPI.getChat(messageObject.chat.id)
    if (chat !== undefined) {
        if (done !== undefined) {
            chat.sendMessage(message, null, messageObject).then(function () {
                function sleep(ms) {
                    return new Promise(resolve => setTimeout(resolve, ms));
                }

                var trials = 0;

                function check() {
                    for (let i = chat.msgs.models.length - 1; i >= 0; i--) {
                        let msg = chat.msgs.models[i];

                        if (!msg.senderObj.isMe || msg.body != message) {
                            continue;
                        }
                        done(WAPI._serializeMessageObj(msg));
                        return True;
                    }
                    trials += 1;
                    console.log(trials);
                    if (trials > 30) {
                        done(true);
                        return;
                    }
                    sleep(500).then(check);
                }
                check();
            });
            return true;
        } else {
            chat.sendMessage(message, null, messageObject);
            return true;
        }
    } else {
        if (done !== undefined) done(false);
        return false;
    }
};

// window.WAPI.sendMessageToID = function (id, message, done) {
//     try {
//         window.getContact = (id) => {
//             return Store.WapQuery.queryExist(id);
//         }
//         window.getContact(id).then(contact => {
//             if (contact.status === 404) {
//                 done(true);
//             } else {
//                 Store.Chat.find(contact.jid).then(chat => {
//                     chat.sendMessage(message);
//                     return true;
//                 }).catch(reject => {
//                     if (WAPI.sendMessage(id, message)) {
//                         done(true);
//                         return true;
//                     }else{
//                         done(false);
//                         return false;
//                     }
//                 });
//             }
//         });
//     } catch (e) {
//         if (window.Store.Chat.length === 0)
//             return false;

//         firstChat = Store.Chat.models[0];
//         var originalID = firstChat.id;
//         firstChat.id = typeof originalID === "string" ? id : new window.Store.UserConstructor(id, { intentionallyUsePrivateConstructor: true });
//         if (done !== undefined) {
//             firstChat.sendMessage(message).then(function () {
//                 firstChat.id = originalID;
//                 done(true);
//             });
//             return true;
//         } else {
//             firstChat.sendMessage(message);
//             firstChat.id = originalID;
//             return true;
//         }
//     }
//     if (done !== undefined) done(false);
//     return false;
// }


window.WAPI.sendMessageToID = function (id, isReturn) {
	
	debugger;
  
  message = CefInjectedJavascript.getMessage();
  
  console.log("MESSAGE: " + message);
  
  if(message===""){
  message=CefInjectedJavascript.getDefaultMessage();
  }
	
	try {
            sendMessageToContact(id,message,isReturn);   
			console.log("Executou função de envio");
    } catch (e) {
			console.log("Não executou função de envio");
        return false;
    }
    
}

window.WAPI.sendChatBotMsgToID = function (id, isReturn) {

    debugger;
    
    message = CefInjectedJavascript.getChatBotMessage();
    
    console.log("MESSAGE: " + message);
    
    if(message===""){
    message=CefInjectedJavascript.getDefaultMessage();
    }
      
      try {
              sendMessageToContact(id,message,isReturn);   
              console.log("Executou função de envio");
      } catch (e) {
              console.log("Não executou função de envio");
          return false;
      }
      
  }
  
  window.WAPI.sendRSSMsgToID = function (id, message, isReturn) {
      
    try{

    debugger;
    
    console.log("MESSAGE: " + message);
    
    if(message===""){
    message=CefInjectedJavascript.getDefaultMessage();
    }
      
      try {
              sendMessageToContact(id,message,isReturn);   
              console.log("Executou função de envio");
              return true;
      } catch (e) {
              console.log("Não executou função de envio");
          return false;
      }
    }catch(e){
        console.log("erro na msg rss " + e);
    }
  }

  window.WAPI.sendMessage = async function (id, message) {
    try{
        console.log("message no sendMessage-> " + message);
        if(id==='status@broadcast') return false;
        let chat = WAPI.getChat(id);
        if(!chat && !id.includes('g')) {
            var contact = WAPI.getContact(id)
            if(!contact) return false;
            await Store.Chat.find(contact.id)
            chat = WAPI.getChat(id);
        }
        if (chat !== undefined) {
                // return WAPI.sendMessageReturnId(chat,message).then(id=>{return id})
                // console.log("o chat não é undefined");
                await chat.sendMessage(message).then(_=>chat.lastReceivedKey._serialized);
                CefInjectedJavascript.resultado(true);
        }else{
            // console.log("o chat é undefined");
            CefInjectedJavascript.resultado(false);
        } 
        
        
    }catch(e){
        CefInjectedJavascript.resultado(false);
        console.log("erro sendMessage-> " + e);
    }
    return false;
    };

 window.WAPI.sendMessage = function (id, message, done) {
     var chat = WAPI.getChat(id);
     if (chat !== undefined) {
         if (done !== undefined) {
             chat.sendMessage(message).then(function () {
                 function sleep(ms) {
                     return new Promise(resolve => setTimeout(resolve, ms));
                 }

                 var trials = 0;

                 function check() {
                     for (let i = chat.msgs.models.length - 1; i >= 0; i--) {
                         let msg = chat.msgs.models[i];

                         if (!msg.senderObj.isMe || msg.body != message) {
                             continue;
                         }
                         done(WAPI._serializeMessageObj(msg));
                         return True;
                     }
                     trials += 1;
                     console.log(trials);
                     if (trials > 30) {
                         done(true);
                         return;
                     }
                     sleep(500).then(check);
                 }
                 check();
             });
             return true;
         } else {
             chat.sendMessage(message);
             return true;
         }
     } else {
         if (done !== undefined) done(false);
         return false;
     }
 };

window.WAPI.sendMessage2 = function (id, message, done) {
    var chat = WAPI.getChat(id);
    if (chat !== undefined) {
        try {
            if (done !== undefined) {
                chat.sendMessage(message).then(function () {
                    done(true);
                });
            } else {
                chat.sendMessage(message);
            }
            return true;
        } catch (error) {
            if (done !== undefined) done(false)
            return false;
        }
    }
    if (done !== undefined) done(false)
    return false;
};

window.WAPI.sendSeen = function (id, done) {
    var chat = window.WAPI.getChat(id);
    if (chat !== undefined) {
        if (done !== undefined) {
            if (chat.getLastMsgKeyForAction === undefined)
                chat.getLastMsgKeyForAction = function () { };
            Store.SendSeen(chat, false).then(function () {
                done(true);
            });
            return true;
        } else {
            Store.SendSeen(chat, false);
            return true;
        }
    }
    if (done !== undefined) done();
    return false;
};

function isChatMessage(message) {
    if (message.isSentByMe) {
        return false;
    }
    if (message.isNotification) {
        return false;
    }
    if (!message.isUserCreatedType) {
        return false;
    }
    return true;
}


window.WAPI.getUnreadMessages = function (includeMe, includeNotifications, use_unread_count, done) {
    const chats  = window.Store.Chat.models;
    let   output = [];

    for (let chat in chats) {
        if (isNaN(chat)) {
            continue;
        }

        let messageGroupObj = chats[chat];
        let messageGroup    = WAPI._serializeChatObj(messageGroupObj);

        messageGroup.messages = [];

        const messages = messageGroupObj.msgs._models;
        for (let i = messages.length - 1; i >= 0; i--) {
            let messageObj = messages[i];
            if (typeof (messageObj.isNewMsg) != "boolean" || messageObj.isNewMsg === false) {
                continue;
            } else {
                messageObj.isNewMsg = false;
                let message = WAPI.processMessageObj(messageObj, includeMe, includeNotifications);
                if (message) {
                    messageGroup.messages.push(message);
                }
            }
        }

        if (messageGroup.messages.length > 0) {
            output.push(messageGroup);
        } else { // no messages with isNewMsg true
            if (use_unread_count) {
                let n = messageGroupObj.unreadCount; // will use unreadCount attribute to fetch last n messages from sender
                for (let i = messages.length - 1; i >= 0; i--) {
                    let messageObj = messages[i];
                    if (n > 0) {
                        if (!messageObj.isSentByMe) {
                            let message = WAPI.processMessageObj(messageObj, includeMe, includeNotifications);
                            messageGroup.messages.unshift(message);
                            n -= 1;
                        }
                    } else if (n === -1) { // chat was marked as unread so will fetch last message as unread
                        if (!messageObj.isSentByMe) {
                            let message = WAPI.processMessageObj(messageObj, includeMe, includeNotifications);
                            messageGroup.messages.unshift(message);
                            break;
                        }
                    } else { // unreadCount = 0
                        break;
                    }
                }
                if (messageGroup.messages.length > 0) {
                    messageGroupObj.unreadCount = 0; // reset unread counter
                    output.push(messageGroup);
                }
            }
        }
    }
    if (done !== undefined) {
        done(output);
    }
    return output;
};

window.WAPI.getGroupOwnerID = async function (id, done) {
    const output = (await WAPI.getGroupMetadata(id)).owner.id;
    if (done !== undefined) {
        done(output);
    }
    return output;

};

window.WAPI.getCommonGroups = async function (id, done) {
    let output = [];

    groups = window.WAPI.getAllGroups();

    for (let idx in groups) {
        try {
            participants = await window.WAPI.getGroupParticipantIDs(groups[idx].id);
            if (participants.filter((participant) => participant == id).length) {
                output.push(groups[idx]);
            }
        } catch (err) {
            console.log("Error in group:");
            console.log(groups[idx]);
            console.log(err);
        }
    }

    if (done !== undefined) {
        done(output);
    }
    return output;
};


window.WAPI.getProfilePicSmallFromId = function (id, done) {
    window.Store.ProfilePicThumb.find(id).then(function (d) {
        if (d.img !== undefined) {
            window.WAPI.downloadFileWithCredentials(d.img, done);
        } else {
            done(false);
        }
    }, function (e) {
        done(false);
    })
};

window.WAPI.getProfilePicFromId = function (id, done) {
    window.Store.ProfilePicThumb.find(id).then(function (d) {
        if (d.imgFull !== undefined) {
            window.WAPI.downloadFileWithCredentials(d.imgFull, done);
        } else {
            done(false);
        }
    }, function (e) {
        done(false);
    })
};

window.WAPI.downloadFileWithCredentials = function (url, done) {
    let xhr = new XMLHttpRequest();

    xhr.onload = function () {
        if (xhr.readyState == 4) {
            if (xhr.status == 200) {
                let reader = new FileReader();
                reader.readAsDataURL(xhr.response);
                reader.onload = function (e) {
                    done(reader.result.substr(reader.result.indexOf(',') + 1))
                };
            } else {
                console.error(xhr.statusText);
            }
        } else {
            console.log(err);
            done(false);
        }
    };

    xhr.open("GET", url, true);
    xhr.withCredentials = true;
    xhr.responseType = 'blob';
    xhr.send(null);
};


window.WAPI.downloadFile = function (url, done) {
    let xhr = new XMLHttpRequest();


    xhr.onload = function () {
        if (xhr.readyState == 4) {
            if (xhr.status == 200) {
                let reader = new FileReader();
                reader.readAsDataURL(xhr.response);
                reader.onload = function (e) {
                    done(reader.result.substr(reader.result.indexOf(',') + 1))
                };
            } else {
                console.error(xhr.statusText);
            }
        } else {
            console.log(err);
            done(false);
        }
    };

    xhr.open("GET", url, true);
    xhr.responseType = 'blob';
    xhr.send(null);
};

window.WAPI.getBatteryLevel = function (done) {
    if (window.Store.Conn.plugged) {
        if (done !== undefined) {
            done(100);
        }
        return 100;
    }
    output = window.Store.Conn.battery;
    if (done !== undefined) {
        done(output);
    }
    return output;
};

window.WAPI.deleteConversation = function (chatId, done) {
    let userId       = new window.Store.UserConstructor(chatId, {intentionallyUsePrivateConstructor: true});
    let conversation = WAPI.getChat(userId);

    if (!conversation) {
        if (done !== undefined) {
            done(false);
        }
        return false;
    }

    window.Store.sendDelete(conversation, false).then(() => {
        if (done !== undefined) {
            done(true);
        }
    }).catch(() => {
        if (done !== undefined) {
            done(false);
        }
    });

    return true;
};

window.WAPI.deleteMessage = function (chatId, messageArray, revoke=false, done) {
    let userId       = new window.Store.UserConstructor(chatId, {intentionallyUsePrivateConstructor: true});
    let conversation = WAPI.getChat(userId);

    if(!conversation) {
        if(done !== undefined) {
            done(false);
        }
        return false;
    }

    if (!Array.isArray(messageArray)) {
        messageArray = [messageArray];
    }
    let messagesToDelete = messageArray.map(msgId => window.Store.Msg.get(msgId));

    if (revoke) {
        conversation.sendRevokeMsgs(messagesToDelete, conversation);
    } else {
        conversation.sendDeleteMsgs(messagesToDelete, conversation);
    }


    if (done !== undefined) {
        done(true);
    }

    return true;
};


window.WAPI.checkNumberStatus = async function (id, done) {
    try {
        const result = await window.Store.WapQuery.queryExist(id);
        if (result.jid === undefined){
            CefInjectedJavascript.resultNumberExists(false, id);
            throw 404;
        } 
        const data = window.WAPI._serializeNumberStatusObj(result);
        if (data.status == 200){
            data.numberExists = true
            CefInjectedJavascript.resultNumberExists(true, data.id._serialized);
        } 
        if (done !== undefined) {
            done(window.WAPI._serializeNumberStatusObj(result));
            done(data);
        }
        return data;
    } catch (e) {
        if (done !== undefined) {
            done(window.WAPI._serializeNumberStatusObj({
                status: e,
                jid: id
            }));
        }
        CefInjectedJavascript.resultNumberExists(false, id);
        return e;
    }
	//CefInjectedJavascript.resultNumberExists(true, id);
};


// window.WAPI.checkNumberStatus = function (id, done) {
//     window.Store.WapQuery.queryExist(id).then((result) => {
//         if( done !== undefined) {
//             if (result.jid === undefined) throw 404;
//             done(window.WAPI._serializeNumberStatusObj(result));
//         }
//     }).catch((e) => {
//         if (done !== undefined) {
//             done(window.WAPI._serializeNumberStatusObj({
//                 status: e,
//                 jid   : id
//             }));
//         }
//     });

//     return true;
// };

/**
 * New messages observable functions.
 */
window.WAPI._newMessagesQueue     = [];
window.WAPI._newMessagesBuffer    = (sessionStorage.getItem('saved_msgs') != null) ? JSON.parse(sessionStorage.getItem('saved_msgs')) : [];
window.WAPI._newMessagesDebouncer = null;
window.WAPI._newMessagesCallbacks = [];

window.Store.Msg.off('add');
sessionStorage.removeItem('saved_msgs');

window.WAPI._newMessagesListener = window.Store.Msg.on('add', (newMessage) => {
    if (newMessage && newMessage.isNewMsg && !newMessage.isSentByMe) {
        let message = window.WAPI.processMessageObj(newMessage, false, false);
        if (message) {
            window.WAPI._newMessagesQueue.push(message);
            window.WAPI._newMessagesBuffer.push(message);
        }

        // Starts debouncer time to don't call a callback for each message if more than one message arrives
        // in the same second
        if (!window.WAPI._newMessagesDebouncer && window.WAPI._newMessagesQueue.length > 0) {
            window.WAPI._newMessagesDebouncer = setTimeout(() => {
                let queuedMessages = window.WAPI._newMessagesQueue;

                window.WAPI._newMessagesDebouncer = null;
                window.WAPI._newMessagesQueue     = [];

                let removeCallbacks = [];

                window.WAPI._newMessagesCallbacks.forEach(function (callbackObj) {
                    if (callbackObj.callback !== undefined) {
                        callbackObj.callback(queuedMessages);
                    }
                    if (callbackObj.rmAfterUse === true) {
                        removeCallbacks.push(callbackObj);
                    }
                });

                // Remove removable callbacks.
                removeCallbacks.forEach(function (rmCallbackObj) {
                    let callbackIndex = window.WAPI._newMessagesCallbacks.indexOf(rmCallbackObj);
                    window.WAPI._newMessagesCallbacks.splice(callbackIndex, 1);
                });
            }, 1000);
        }
    }
});

window.WAPI._unloadInform = (event) => {
    // Save in the buffer the ungot unreaded messages
    window.WAPI._newMessagesBuffer.forEach((message) => {
        Object.keys(message).forEach(key => message[key] === undefined ? delete message[key] : '');
    });
    sessionStorage.setItem("saved_msgs", JSON.stringify(window.WAPI._newMessagesBuffer));

    // Inform callbacks that the page will be reloaded.
    window.WAPI._newMessagesCallbacks.forEach(function (callbackObj) {
        if (callbackObj.callback !== undefined) {
            callbackObj.callback({ status: -1, message: 'page will be reloaded, wait and register callback again.' });
        }
    });
};

window.addEventListener("unload", window.WAPI._unloadInform, false);
window.addEventListener("beforeunload", window.WAPI._unloadInform, false);
window.addEventListener("pageunload", window.WAPI._unloadInform, false);

/**
 * Registers a callback to be called when a new message arrives the WAPI.
 * @param rmCallbackAfterUse - Boolean - Specify if the callback need to be executed only once
 * @param done - function - Callback function to be called when a new message arrives.
 * @returns {boolean}
 */
window.WAPI.waitNewMessages = function (rmCallbackAfterUse = true, done) {
    window.WAPI._newMessagesCallbacks.push({ callback: done, rmAfterUse: rmCallbackAfterUse });
    return true;
};

/**
 * Reads buffered new messages.
 * @param done - function - Callback function to be called contained the buffered messages.
 * @returns {Array}
 */
window.WAPI.getBufferedNewMessages = function (done) {
    let bufferedMessages = window.WAPI._newMessagesBuffer;
    window.WAPI._newMessagesBuffer = [];
    if (done !== undefined) {
        done(bufferedMessages);
    }
    return bufferedMessages;
};
/** End new messages observable functions **/

window.WAPI.sendImage = function (imgBase64, chatid, filename, caption, done) {
//var idUser = new window.Store.UserConstructor(chatid);
var idUser = new window.Store.UserConstructor(chatid, { intentionallyUsePrivateConstructor: true });
// create new chat
return Store.Chat.find(idUser).then((chat) => {
    var mediaBlob = window.WAPI.base64ImageToFile(imgBase64, filename);
    var mc = new Store.MediaCollection(chat);
    mc.processAttachments([{file: mediaBlob}, 1], chat, 1).then(() => {
        var media = mc.models[0];
        media.sendToChat(chat, { caption: caption });
        if (done !== undefined) done(true);
    });
});
}

window.WAPI.base64ImageToFile = function (b64Data, filename) {
    var arr = b64Data.split(',');
    //var mime = arr[0].match(/:(.*?);/)[1];
    var mime = CefInjectedJavascript.getTypeFile();
    var bstr = atob(arr[0]);
    var n = bstr.length;
    var u8arr = new Uint8Array(n);

    while (n--) {
        u8arr[n] = bstr.charCodeAt(n);
    }

    return new File([u8arr], filename, { type: mime });
};

// window.WAPI.base64ImageToFile = function (b64Data, filename) {
//     var arr   = b64Data.split(',');
//     var mime  = arr[0].match(/:(.*?);/)[1];
//     var bstr  = atob(arr[1]);
//     var n     = bstr.length;
//     var u8arr = new Uint8Array(n);

//     while (n--) {
//         u8arr[n] = bstr.charCodeAt(n);
//     }

//     return new File([u8arr], filename, {type: mime});
// };

/**
 * Send contact card to a specific chat using the chat ids
 *
 * @param {string} to '000000000000@c.us'
 * @param {string|array} contact '111111111111@c.us' | ['222222222222@c.us', '333333333333@c.us, ... 'nnnnnnnnnnnn@c.us']
 */
window.WAPI.sendContact = function (to, contact) {
    if (!Array.isArray(contact)) {
        contact = [contact];
    }
    contact = contact.map((c) => {
        return WAPI.getChat(c).__x_contact;
    });

    if (contact.length > 1) {
        window.WAPI.getChat(to).sendContactList(contact);
    } else if (contact.length === 1) {
        window.WAPI.getChat(to).sendContact(contact[0]);
    }
};

/**
 * Create an chat ID based in a cloned one
 *
 * @param {string} chatId '000000000000@c.us'
 */
window.WAPI.getNewMessageId = function (chatId) {
    var newMsgId = Store.Msg.models[0].__x_id.clone();

    newMsgId.fromMe      = true;
    newMsgId.id          = WAPI.getNewId().toUpperCase();
    newMsgId.remote      = chatId;
    newMsgId._serialized = `${newMsgId.fromMe}_${newMsgId.remote}_${newMsgId.id}`

    return newMsgId;
};

window.WAPI.getNewMessageIdVCard = function (chatId) {
    var newMsgId = new Store.MsgKey(Object.assign({}, Store.Msg.models[0].__x_id))

    newMsgId.fromMe = true;
    newMsgId.id = WAPI.getNewId().toUpperCase();
    newMsgId.remote = new Store.WidFactory.createWid(chatId);
    newMsgId._serialized = `${newMsgId.fromMe}_${newMsgId.remote}_${newMsgId.id}`

    return newMsgId;
};

window.WAPI.sendMessageToTeste = function(chatid) {
	debugger;
  
  	message = CefInjectedJavascript.getMessage();
  
  	console.log("MESSAGE: " + message);
  
  	if(message===""){
  	message=CefInjectedJavascript.getDefaultMessage();
  	}
	
	try {
            var idUser = new window.Store.UserConstructor(chatid, {
        		intentionallyUsePrivateConstructor: true
    		});
    		return Store.Chat.find(idUser).then((chatid) => {
        		var mc = new Store.SendTextMsgToChat(chatid, message);
        		return true;
    		}); 
			console.log("Executou função de envio");
    } catch (e) {
			console.log("Não executou função de envio");
        return false;
    }		
    
}
			
window.WAPI.sendRSSMsgToIDteste = function (id, message, isReturn) {
      
    try{

    debugger;
    
    console.log("MESSAGE: " + message);
    
    if(message===""){
    message=CefInjectedJavascript.getDefaultMessage();
    }
      
      try {
              sendMessageToTeste(id,message,isReturn);   
              console.log("Executou função de envio");
              return true;
      } catch (e) {
              console.log("Não executou função de envio");
          return false;
      }
    }catch(e){
        console.log("erro na msg rss " + e);
    }
  }

/**
*chatId = "5519992605703@c.us" //para quem quero enviar 
*vcard = "BEGIN:VCARD\nVERSION:3.0\nN:;0;;;\nFN:Carlos\nTEL;type=CELL;waid=550000000000:+00 00 0000-0000\nEND:VCARD" //propriedade do Vcard
*contactName = "5519992605703" //nome do contato que será enviado
*contactNumber = "5519992605703" //e o numero do bendito
*/
window.WAPI.sendVCard = async function (chatId, vcard, contactName, contactNumber) {
    var chat = Store.Chat.get(chatId);
    var tempMsg = Object.create(Store.Msg.models.filter(msg => msg.__x_isSentByMe && !msg.quotedMsg)[0]);
    var newId = window.WAPI.getNewMessageIdVCard(chatId);
    vcard = vcard.replace(/<>/g, '\n');
    var extend = {
        ack: 0,
        id: newId,
        local: !0,
        self: "out",
        t: parseInt(new Date().getTime() / 1000),
        to: chatId,
        isNewMsg: !0,
        type: "vcard",
        body:contactNumber?vcard.replace('TEL;TYPE=WORK,VOICE:',`TEL;TYPE=WORK,VOICE;waid=${contactNumber}:`):vcard,
    };
    Object.assign(tempMsg, extend);
    return (await Promise.all(Store.addAndSendMsgToChat(chat, tempMsg)))[1]=="success"
};

/**
 * Block contact
 * @param {string} id '000000000000@c.us'
 * @param {*} done - function - Callback function to be called when a new message arrives.
 */
window.WAPI.contactBlock = function (id, done) {
    const contact = window.Store.Contact.get(id);
    if (contact !== undefined) {
        contact.setBlock(!0);
        done(true);
        return true;
    }
    done(false);
    return false;
}
/**
 * unBlock contact
 * @param {string} id '000000000000@c.us'
 * @param {*} done - function - Callback function to be called when a new message arrives.
 */
window.WAPI.contactUnblock = function (id, done) {
    const contact = window.Store.Contact.get(id);
    if (contact !== undefined) {
        contact.setBlock(!1);
        done(true);
        return true;
    }
    done(false);
    return false;
}

/**
 * Remove participant of Group
 * @param {*} idGroup '0000000000-00000000@g.us'
 * @param {*} idParticipant '000000000000@c.us'
 * @param {*} done - function - Callback function to be called when a new message arrives.
 */
window.WAPI.removeParticipantGroup = function (idGroup, idParticipant, done) {
    window.Store.WapQuery.removeParticipants(idGroup, [idParticipant]).then(() => {
        const metaDataGroup = window.Store.GroupMetadata.get(id)
        checkParticipant = metaDataGroup.participants._index[idParticipant];
        if (checkParticipant === undefined) {
            done(true); return true;
        }
    })
}

/**
 * Promote Participant to Admin in Group
 * @param {*} idGroup '0000000000-00000000@g.us'
 * @param {*} idParticipant '000000000000@c.us'
 * @param {*} done - function - Callback function to be called when a new message arrives.
 */
window.WAPI.promoteParticipantAdminGroup = function (idGroup, idParticipant, done) {
    window.Store.WapQuery.promoteParticipants(idGroup, [idParticipant]).then(() => {
        const metaDataGroup = window.Store.GroupMetadata.get(id)
        checkParticipant = metaDataGroup.participants._index[idParticipant];
        if (checkParticipant !== undefined && checkParticipant.isAdmin) {
            done(true); return true;
        }
        done(false); return false;
    })
}

/**
 * Demote Admin of Group
 * @param {*} idGroup '0000000000-00000000@g.us'
 * @param {*} idParticipant '000000000000@c.us'
 * @param {*} done - function - Callback function to be called when a new message arrives.
 */
window.WAPI.demoteParticipantAdminGroup = function (idGroup, idParticipant, done) {
    window.Store.WapQuery.demoteParticipants(idGroup, [idParticipant]).then(() => {
        const metaDataGroup = window.Store.GroupMetadata.get(id)
        if (metaDataGroup === undefined) {
            done(false); return false;
        }
        checkParticipant = metaDataGroup.participants._index[idParticipant];
        if (checkParticipant !== undefined && checkParticipant.isAdmin) {
            done(false); return false;
        }
        done(true); return true;
    })
}

<<<<!!!!<>!!!!>>>>>
// ============================ PUSHNOWAPI ========================================
function fillUsernameField(email){
    try{
        document.getElementsByClassName("form-control form-control-lg")[0].value = email;
    }catch(e){

    }
}

function fillPasswordField(pass){
    try{
        document.getElementsByClassName("form-control form-control-lg")[1].value = pass;
    }catch(e){

    }
}

function clickLoginButton(){
    try{
        document.getElementsByClassName("btn btn-primary btn-block my-1")[0].click();
    }catch(e){

    }
}

function getSituationLogin(){
    try{
        if(window.location.href != "https://api-zapmax.ferramentas.marketing/login"){
            return true;
        }else{
            return false;
        }
    }catch(e){
        return false;
    }
}

function getMessageErrorLogin(){
    try{
        if(document.getElementsByClassName("alert alert-danger animated fadeInDown").length>0){
            return "errado";
        }else{
            return "ok";
        }
    }catch(e){
        return "erro";
    }
}

function reloadWindow(){
    window.location.reload(true);
}

function getCurrentURL(){
    try{
        return window.location.href;
    }catch(e){
        return window.location.href;
    }
}

function GetListCampains(){
    
    try{
        var len = document.getElementsByClassName("d-flex flex-column").length;

        var list ="";
        var separator = '<!&!>';
        var lineSeparator = '§';
        var name = "";
        var origin = "";
        var status = "";
        var url = "";
        if(len>=1){
            
            for (let index = 0; index < len; index++) {
                name = document.getElementsByClassName("d-flex flex-column")[index].innerText.split(/(\r\n|\n|\r)/gm)[0];
                origin = document.getElementsByClassName("d-flex flex-column")[index].innerText.split(/(\r\n|\n|\r)/gm)[2];
                status = document.getElementsByClassName("custom-control custom-switch")[index].children[0].checked.toString();
                url = document.getElementsByClassName("clickable d-none d-md-table-cell text-muted")[index].dataset.href;
                list = list + name + separator + origin + separator + status + separator + url + lineSeparator;
            }

            return list;
        }else{
            return "nao";
        }

    }catch(e){
            return e;
    }
}

function findSelectCampain(ind, url){
    try{
        
        document.getElementsByClassName("clickable d-none d-md-table-cell text-muted")[ind].children[0].click();
    
    }catch(e){
        window.location.href = url;
    }
}



function GetListNotifications(){
    
    try{
        var len = document.getElementsByClassName("d-flex flex-column").length;

        var list ="";
        var separator = '<!&!>';
        var lineSeparator = '§';
        var name = "";
        var origin = "";
        var status = "";
        var url = "";
        if(len>=3){
            
            for (let index = 2; index < len; index++) {
                name = document.getElementsByClassName("d-flex flex-column")[index].innerText.split(/(\r\n|\n|\r)/gm)[0];
                origin = document.getElementsByClassName("d-flex flex-column")[index].innerText.split(/(\r\n|\n|\r)/gm)[2];
                status = document.getElementsByClassName("custom-control custom-switch")[index -1 ].children[0].checked.toString();
                url = document.getElementsByClassName("dropdown")[index].children[1].children[1].href
                
                    list = list + name + separator + origin + separator + status + separator + url + lineSeparator;
                   
            }
            return list;
        }else{
            return "nao";
        }

    }catch(e){
            return e;
    }
}

function findSelectNotification(ind){
    try{
        
        document.getElementsByClassName("clickable d-none d-md-table-cell text-muted")[ind].children[0].click();
    
    }catch(e){
            
    }
}


function getDatesRange(){
    
    try{
        return document.getElementsByName("date_range")[0].value;
    }catch(e){
        return "erro";
    }

}


function getUserName(){
    try{
        var name = document.getElementsByClassName("nav-link dropdown-toggle")[0].innerText.trim(' ');
        return name;
    }catch(e){
        return e.toString();
    }
}

function changeStatusNotification(index,activation){
    
    index++;
    status = document.getElementsByClassName("custom-control custom-switch")[index].children[0].checked;
    
    if(status != activation){
        try{
            document.getElementsByClassName("custom-control custom-switch")[index].children[1].click();
        }catch(e){
            document.getElementsByClassName("custom-control custom-switch")[index].children[0].click();
        }
    }    
}

function goToMainWindow(){
    try{
        window.location.href = "https://api-zapmax.ferramentas.marketing/dashboard";
    }catch(e){
        window.location.href = "https://api-zapmax.ferramentas.marketing/dashboard";
    }
}

function getSessionCookie(){
    try{
        return document.cookie;
    }catch(e){
        return document.cookie;
    }
}

function reloadSession(){
    try {
        document.getElementsByClassName("img-fluid navbar-logo")[0].click();
    } catch (e) {
        try {
            goToMainWindow();
        } catch (e) {
            window.location.href = "https://api-zapmax.ferramentas.marketing/dashboard";
        }
    }
}
